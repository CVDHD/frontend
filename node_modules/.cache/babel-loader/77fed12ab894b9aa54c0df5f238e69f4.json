{"remainingRequest":"/home/hale/Desktop/Project/frontend/node_modules/babel-loader/lib/index.js!/home/hale/Desktop/Project/frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/hale/Desktop/Project/frontend/src/services/getData/UserService.js","dependencies":[{"path":"/home/hale/Desktop/Project/frontend/src/services/getData/UserService.js","mtime":1603812302060},{"path":"/home/hale/Desktop/Project/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1600530020479},{"path":"/home/hale/Desktop/Project/frontend/node_modules/babel-loader/lib/index.js","mtime":1600097944242},{"path":"/home/hale/Desktop/Project/frontend/node_modules/eslint-loader/index.js","mtime":1600530034603}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hale/Desktop/Project/frontend/src/services/getData/UserService.js"],"names":["httpHandler","UserService","payload","onSuccess","onFailure","post","get","subject","code_subject","delete","page","singletonInstance","Object","freeze"],"mappings":";;;;;AACA,OAAOA,WAAP,MAAwB,iBAAxB;;IAEMC,W;;;;;;;;mGACiBC,O,EAASC,S,EAAWC,S;;;;;;8BAE/BD,S;;uBAAgBH,WAAW,CAACK,IAAZ,CAAiB,OAAjB,EAA0BH,OAA1B,C;;;;;;;;;;;AAEhBE,gBAAAA,SAAS,aAAT;;;;;;;;;;;;;;;;;;;8FAIKD,S,EAAWC,S;;;;;;+BAEhBD,S;;uBAAgBH,WAAW,CAACM,GAAZ,CAAgB,QAAhB,C;;;;;;;;;;;AAEhBF,gBAAAA,SAAS,cAAT;;;;;;;;;;;;;;;;;;;yGAIgBD,S,EAAWC,S;;;;;;+BAE3BD,S;;uBAAgBH,WAAW,CAACM,GAAZ,CAAgB,MAAhB,C;;;;;;;;;;;AAEhBF,gBAAAA,SAAS,cAAT;;;;;;;;;;;;;;;;;;;yGAGgBG,O,EAASJ,S,EAAWC,S;;;;;;+BAEpCD,S;;uBAAgBH,WAAW,CAACK,IAAZ,CAAiB,iBAAjB,EAAoCE,OAApC,C;;;;;;;;;;;AAEhBH,gBAAAA,SAAS,cAAT;;;;;;;;;;;;;;;;;;;qGAIYI,Y,EAAcL,S,EAAWC,S;;;;;;+BAErCD,S;;uBAAgBH,WAAW,CAACS,MAAZ,2BAAsCD,YAAtC,E;;;;;;;;;;;AAEhBJ,gBAAAA,SAAS,cAAT;;;;;;;;;;;;;;;;;;;2GAIkBM,I,EAAMP,S,EAAWC,S;;;;;;+BAEnCD,S;;uBAAgBH,WAAW,CAACM,GAAZ,8BAAsCI,IAAtC,E;;;;;;;;;;;AAEhBN,gBAAAA,SAAS,cAAT;;;;;;;;;;;;;;;;;;;sGAIaF,O,EAASC,S,EAAWC,S;;;;;;+BAEjCD,S;;uBAAgBH,WAAW,CAACK,IAAZ,CAAiB,iBAAjB,EAAoCH,OAApC,C;;;;;;;;;;;AAEhBE,gBAAAA,SAAS,cAAT;;;;;;;;;;;;;;;;;;;;;AAKZ,IAAMO,iBAAiB,GAAG,IAAIV,WAAJ,EAA1B;AACAW,MAAM,CAACC,MAAP,CAAcF,iBAAd;AACA,eAAeA,iBAAf","sourcesContent":["\nimport httpHandler from '../http_handler'\n\nclass UserService {\n    async requestLogin(payload, onSuccess, onFailure) {\n        try {\n            onSuccess(await httpHandler.post('login', payload))\n        } catch (err) {\n            onFailure(err)\n        }\n    }\n\n    async logout(onSuccess, onFailure) {\n        try {\n            onSuccess(await httpHandler.get('logout'))\n        } catch (err) {\n            onFailure(err)\n        }\n    }\n\n    async getResultRegister(onSuccess, onFailure) {\n        try {\n            onSuccess(await httpHandler.get('user'))\n        } catch (err) {\n            onFailure(err)\n        }\n    }\n    async addResultRegister(subject, onSuccess, onFailure) {\n        try {\n            onSuccess(await httpHandler.post('result-register', subject))\n        } catch (err) {\n            onFailure(err)\n        }\n    }\n\n    async deleteSubject(code_subject, onSuccess, onFailure) {\n        try {\n            onSuccess(await httpHandler.delete(`code-subject?id=${code_subject}`))\n        } catch (err) {\n            onFailure(err)\n        }\n    }\n\n    async getListPageRegister(page, onSuccess, onFailure) {\n        try {\n            onSuccess(await httpHandler.get(`list-register?page=${page}`))\n        } catch (err) {\n            onFailure(err)\n        }\n    }\n\n    async changePassword(payload, onSuccess, onFailure) {\n        try {\n            onSuccess(await httpHandler.post('change-password', payload))\n        } catch (err) {\n            onFailure(err)\n        }\n    }\n\n}\nconst singletonInstance = new UserService()\nObject.freeze(singletonInstance)\nexport default singletonInstance\n"]}]}